
C:/altera_lite/16.0/Lab9_10/part3/address_map_arm.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea000056 	b	160 <_start>
   4:	ea00001a 	b	74 <SERVICE_UND>
   8:	ea00001a 	b	78 <SERVICE_SVC>
   c:	ea00001b 	b	80 <SERVICE_ABT_INST>
  10:	ea000019 	b	7c <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea000008 	b	40 <__cs3_region_init_ram>
  1c:	ea000018 	b	84 <SERVICE_FIQ>

Disassembly of section .text:

00000040 <SERVICE_IRQ>:
  40:	e92d403f 	push	{r0, r1, r2, r3, r4, r5, lr}
  44:	e59f40cc 	ldr	r4, [pc, #204]	; 118 <ICDISER+0x18>
  48:	e594500c 	ldr	r5, [r4, #12]

0000004c <PRIV_TIMER_CHECK>:
  4c:	e355001d 	cmp	r5, #29
  50:	1a000001 	bne	5c <KEYS_CHECK>
  54:	eb000060 	bl	1dc <PRIV_TIMER_ISR>
  58:	ea000002 	b	68 <EXIT_IRQ>

0000005c <KEYS_CHECK>:
  5c:	e3550049 	cmp	r5, #73	; 0x49

00000060 <UNEXPECTED>:
  60:	1afffffe 	bne	60 <UNEXPECTED>
  64:	eb000031 	bl	130 <KEY_ISR>

00000068 <EXIT_IRQ>:
  68:	e5845010 	str	r5, [r4, #16]
  6c:	e8bd403f 	pop	{r0, r1, r2, r3, r4, r5, lr}
  70:	e25ef004 	subs	pc, lr, #4

00000074 <SERVICE_UND>:
  74:	eafffffe 	b	74 <SERVICE_UND>

00000078 <SERVICE_SVC>:
  78:	eafffffe 	b	78 <SERVICE_SVC>

0000007c <SERVICE_ABT_DATA>:
  7c:	eafffffe 	b	7c <SERVICE_ABT_DATA>

00000080 <SERVICE_ABT_INST>:
  80:	eafffffe 	b	80 <SERVICE_ABT_INST>

00000084 <SERVICE_FIQ>:
  84:	eafffffe 	b	84 <SERVICE_FIQ>

00000088 <CONFIG_GIC>:
  88:	e3e00000 	mvn	r0, #0
  8c:	e59f1088 	ldr	r1, [pc, #136]	; 11c <ICDISER+0x1c>
  90:	e5810000 	str	r0, [r1]
  94:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  98:	e3a0001d 	mov	r0, #29
  9c:	e3a01001 	mov	r1, #1
  a0:	eb00000a 	bl	d0 <CONFIG_INTERRUPT>
  a4:	e3a00049 	mov	r0, #73	; 0x49
  a8:	e3a01001 	mov	r1, #1
  ac:	eb000007 	bl	d0 <CONFIG_INTERRUPT>
  b0:	e59f0060 	ldr	r0, [pc, #96]	; 118 <ICDISER+0x18>
  b4:	e59f1064 	ldr	r1, [pc, #100]	; 120 <ICDISER+0x20>
  b8:	e5801004 	str	r1, [r0, #4]
  bc:	e3a01001 	mov	r1, #1
  c0:	e5801000 	str	r1, [r0]
  c4:	e59f0058 	ldr	r0, [pc, #88]	; 124 <ICDISER+0x24>
  c8:	e5801000 	str	r1, [r0]
  cc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000000d0 <CONFIG_INTERRUPT>:
  d0:	e92d4030 	push	{r4, r5, lr}
  d4:	e1a041a0 	lsr	r4, r0, #3
  d8:	e3c44003 	bic	r4, r4, #3
  dc:	e59f2044 	ldr	r2, [pc, #68]	; 128 <ICDISER+0x28>
  e0:	e0824004 	add	r4, r2, r4
  e4:	e200201f 	and	r2, r0, #31
  e8:	e3a05001 	mov	r5, #1
  ec:	e1a02215 	lsl	r2, r5, r2
  f0:	e5943000 	ldr	r3, [r4]
  f4:	e1833002 	orr	r3, r3, r2
  f8:	e5843000 	str	r3, [r4]
  fc:	e3c04003 	bic	r4, r0, #3
 100:	e59f2024 	ldr	r2, [pc, #36]	; 12c <ICDISER+0x2c>
 104:	e0824004 	add	r4, r2, r4
 108:	e2002003 	and	r2, r0, #3
 10c:	e0824004 	add	r4, r2, r4
 110:	e5c41000 	strb	r1, [r4]
 114:	e8bd8030 	pop	{r4, r5, pc}
 118:	fffec100 	.word	0xfffec100
 11c:	fffed198 	.word	0xfffed198
 120:	0000ffff 	.word	0x0000ffff
 124:	fffed000 	.word	0xfffed000
 128:	fffed100 	.word	0xfffed100
 12c:	fffed800 	.word	0xfffed800

00000130 <KEY_ISR>:
				.include "address_map_arm.s"
				.global	KEY_ISR
KEY_ISR: 		LDR	R0, =KEY_BASE			// base address of KEYs parallel port
 130:	e59f0020 	ldr	r0, [pc, #32]	; 158 <END_KEY_ISR+0x4>
				LDR	R1, [R0, #0xC]			// read edge capture register
 134:	e590100c 	ldr	r1, [r0, #12]
				STR	R1, [R0, #0xC]			// clear the interrupt
 138:	e580100c 	str	r1, [r0, #12]

0000013c <CHK_KEY3>:

CHK_KEY3:		TST R1, #0b1000
 13c:	e3110008 	tst	r1, #8
				BEQ END_KEY_ISR
 140:	0a000003 	beq	154 <END_KEY_ISR>

00000144 <START_STOP>:

START_STOP:		LDR	R0, =MPCORE_PRIV_TIMER	// timer base address
 144:	e59f0010 	ldr	r0, [pc, #16]	; 15c <END_KEY_ISR+0x8>
				LDR	R1, [R0, #0x8]			// read timer control register
 148:	e5901008 	ldr	r1, [r0, #8]
				EOR R1, R1, #1
 14c:	e2211001 	eor	r1, r1, #1
				STR R1, [R0, #0x8] 
 150:	e5801008 	str	r1, [r0, #8]

00000154 <END_KEY_ISR>:

END_KEY_ISR:	MOV	PC, LR
 154:	e1a0f00e 	mov	pc, lr
 158:	ff200050 	.word	0xff200050
 15c:	fffec600 	.word	0xfffec600

00000160 <_start>:
			.include "address_map_arm.s"
			.text
			.global	_start
_start:		MOV R0, #0b10010			//initialize the IRQ stack pointer 
 160:	e3a00012 	mov	r0, #18
			MSR CPSR, R0			
 164:	e129f000 	msr	CPSR_fc, r0
			LDR SP, =0x3FFFFFFC
 168:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003
			MOV R0, #0b10011			//initialize the SVC stack pointer 
 16c:	e3a00013 	mov	r0, #19
			MSR CPSR, R0
 170:	e129f000 	msr	CPSR_fc, r0
			LDR SP, =0xFFFFFFFC
 174:	e3e0d003 	mvn	sp, #3
			MOV R9, #0
 178:	e3a09000 	mov	r9, #0
			
			BL	CONFIG_GIC				// configure the ARM generic interrupt controller
 17c:	ebffffc1 	bl	88 <CONFIG_GIC>
			BL	CONFIG_PRIV_TIMER		// configure the MPCore private timer
 180:	eb000005 	bl	19c <CONFIG_PRIV_TIMER>
			BL	CONFIG_KEYS				// configure the pushbutton KEYs
 184:	eb00000a 	bl	1b4 <CONFIG_KEYS>
			
			MSR CPSR, #0b00010011		//enable SVC mode
 188:	e329f013 	msr	CPSR_fc, #19
			LDR	R6, =0xFF200000 		// red LED base address
 18c:	e59f6038 	ldr	r6, [pc, #56]	; 1cc <LEDR_PATTERN+0x4>

00000190 <MAIN>:

MAIN:		LDR	R4, LEDR_PATTERN		// LEDR pattern, modified by timer ISR
 190:	e59f4030 	ldr	r4, [pc, #48]	; 1c8 <LEDR_PATTERN>
			STR R4, [R6] 				// write to red LEDs
 194:	e5864000 	str	r4, [r6]
			B 	MAIN
 198:	eafffffc 	b	190 <MAIN>

0000019c <CONFIG_PRIV_TIMER>:

  
CONFIG_PRIV_TIMER:
			LDR	R0, =0xFFFEC600 		// Timer base address
 19c:	e59f002c 	ldr	r0, [pc, #44]	; 1d0 <LEDR_PATTERN+0x8>
			LDR R1, =20000000
 1a0:	e59f102c 	ldr	r1, [pc, #44]	; 1d4 <LEDR_PATTERN+0xc>
			STR R1, [R0]
 1a4:	e5801000 	str	r1, [r0]
			LDR R2, =0b111
 1a8:	e3a02007 	mov	r2, #7
			STR R2, [R0, #8]
 1ac:	e5802008 	str	r2, [r0, #8]
			MOV PC, LR 					// return
 1b0:	e1a0f00e 	mov	pc, lr

000001b4 <CONFIG_KEYS>:

CONFIG_KEYS:
			LDR R0, =0xFF200050 		// KEYs base address
 1b4:	e59f001c 	ldr	r0, [pc, #28]	; 1d8 <LEDR_PATTERN+0x10>
			LDR	R3, =0b1000
 1b8:	e3a03008 	mov	r3, #8
			STR	R3, [R0, #8]
 1bc:	e5803008 	str	r3, [r0, #8]
			MOV PC, LR 					// return
 1c0:	e1a0f00e 	mov	pc, lr

000001c4 <LEDR_DIRECTION>:
 1c4:	00000000 	.word	0x00000000

000001c8 <LEDR_PATTERN>:
 1c8:	00000001 	.word	0x00000001
 1cc:	ff200000 	.word	0xff200000
 1d0:	fffec600 	.word	0xfffec600
 1d4:	01312d00 	.word	0x01312d00
 1d8:	ff200050 	.word	0xff200050

000001dc <PRIV_TIMER_ISR>:
				.include "address_map_arm.s"
				.extern	LEDR_DIRECTION
				.extern	LEDR_PATTERN
				.global PRIV_TIMER_ISR
PRIV_TIMER_ISR:	LDR		R0, =MPCORE_PRIV_TIMER	// base address of timer
 1dc:	e59f0064 	ldr	r0, [pc, #100]	; 248 <END_TIMER_ISR+0x4>
				MOV		R1, #1
 1e0:	e3a01001 	mov	r1, #1
				STR		R1, [R0, #0xC]			// write 1 to F bit to reset it
 1e4:	e580100c 	str	r1, [r0, #12]

000001e8 <SWEEP>:
												// and clear the interrupt

SWEEP:			LDR		R0, =LEDR_DIRECTION		// put shifting address into R2
 1e8:	e59f005c 	ldr	r0, [pc, #92]	; 24c <END_TIMER_ISR+0x8>
				LDR		R2, [R0]
 1ec:	e5902000 	ldr	r2, [r0]
				LDR		R1, =LEDR_PATTERN		// put LEDR pattern into R3
 1f0:	e59f1058 	ldr	r1, [pc, #88]	; 250 <END_TIMER_ISR+0xc>
				LDR		R3, [R1]
 1f4:	e5913000 	ldr	r3, [r1]
				CMP		R2, #0
 1f8:	e3520000 	cmp	r2, #0
				BNE		SHIFTR
 1fc:	1a000007 	bne	220 <SHIFTR>
				BEQ		SHIFTL
 200:	0affffff 	beq	204 <SHIFTL>

00000204 <SHIFTL>:
				
SHIFTL:			ROR 	R3, #31	
 204:	e1a03fe3 	ror	r3, r3, #31
				ADD		R9, #1	
 208:	e2899001 	add	r9, r9, #1
				CMP 	R9, #9
 20c:	e3590009 	cmp	r9, #9
				BEQ 	L_R
 210:	0a000000 	beq	218 <L_R>
				BNE		DONE_SWEEP
 214:	1a000008 	bne	23c <DONE_SWEEP>

00000218 <L_R>:

L_R:			MOV		R2, #1					// change direction to right
 218:	e3a02001 	mov	r2, #1
				B 		DONE_SWEEP
 21c:	ea000006 	b	23c <DONE_SWEEP>

00000220 <SHIFTR>:
				
SHIFTR:			
				ROR 	R3, #1
 220:	e1a030e3 	ror	r3, r3, #1
				SUBS	R9, #1	
 224:	e2599001 	subs	r9, r9, #1
				CMP 	R9, #0
 228:	e3590000 	cmp	r9, #0
				BEQ 	R_L	
 22c:	0a000000 	beq	234 <R_L>
				BNE		DONE_SWEEP
 230:	1a000001 	bne	23c <DONE_SWEEP>

00000234 <R_L>:

R_L:			MOV		R2, #0					// change direction to left
 234:	e3a02000 	mov	r2, #0
				B		DONE_SWEEP
 238:	eaffffff 	b	23c <DONE_SWEEP>

0000023c <DONE_SWEEP>:

DONE_SWEEP:		STR		R2, [R0]				// put shifting direction back into memory
 23c:	e5802000 	str	r2, [r0]
				STR		R3, [R1]				// put LEDR pattern back onto stack
 240:	e5813000 	str	r3, [r1]

00000244 <END_TIMER_ISR>:
	
END_TIMER_ISR:	MOV		PC, LR
 244:	e1a0f00e 	mov	pc, lr
 248:	fffec600 	.word	0xfffec600
 24c:	000001c4 	.word	0x000001c4
 250:	000001c8 	.word	0x000001c8
