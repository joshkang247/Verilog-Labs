// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/30/2016 14:09:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          part3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module part3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [1:0] KEY;
reg [2:0] SW;
// wires                                               
wire [2:0] LEDG;
wire [0:0] LEDR;

// assign statements (if any)                          
part3 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.KEY(KEY),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.SW(SW)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #5000 1'b1;
	#5000;
end 
// KEY[ 1 ]
initial
begin
	KEY[1] = 1'b0;
	KEY[1] = #70000 1'b1;
	KEY[1] = #20000 1'b0;
end 
// KEY[ 0 ]
initial
begin
	KEY[0] = 1'b0;
	KEY[0] = #120000 1'b1;
	KEY[0] = #10000 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b0;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
end 
endmodule

